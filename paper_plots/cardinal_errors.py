# Script to determine the differece in power between the FEE/measured maps along cardinal slices
# More power measured alone more sensitive axis of the dipole - perpendicular to dipole
# And vice-versa

# Rotation of reference tiles

import argparse
from pathlib import Path

import matplotlib
import numpy as np
from astropy.stats import mad_std as mad
from embers.rf_tools.colormaps import spectral
from embers.tile_maps.beam_utils import (chisq_fit_gain,
                                         healpix_cardinal_slices, map_slices,
                                         poly_fit, rotate_map)
from matplotlib import pyplot as plt

matplotlib.use("Agg")
_spec, _ = spectral()

parser = argparse.ArgumentParser(
    description="""
    Tile Slices paper plot
    """
)

parser.add_argument(
    "--out_dir",
    metavar="\b",
    default="../embers_out/paper_plots/tile_slices/",
    help="Output directory. Default=../embers_out/paper_plots",
)
parser.add_argument(
    "--map_dir",
    metavar="\b",
    default="../embers_out/tile_maps/tile_maps/tile_maps_clean/",
    help="Tile map directory. Default=../embers_out/tile_maps/tile_maps/tile_maps_clean",
)
parser.add_argument(
    "--fee_map",
    metavar="\b",
    default="../embers_out/mwa_utils/mwa_fee/mwa_fee_beam.npz",
    help="Healpix FEE map of mwa tile. default=../embers_out/mwa_utils/mwa_fee/mwa_fee_beam.npz",
)
parser.add_argument(
    "--nside", metavar="\b", type=int, default=32, help="Healpix Nside. Default = 32",
)

args = parser.parse_args()

out_dir = Path(args.out_dir)
map_dir = Path(args.map_dir)
fee_map = args.fee_map
nside = args.nside

# make output dir if it doesn't exist
out_dir.mkdir(parents=True, exist_ok=True)

tiles = [
    "S06",
    "S07",
    "S08",
    "S09",
    "S10",
    "S12",
    "S29",
    "S30",
    "S31",
    "S32",
    "S33",
    "S34",
    "S35",
    "S36",
]

refs = ["rf1"]

tile_pairs = []
for r in refs:
    for t in tiles:
        tile_pairs.append([t, r])

PB_0 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348,
    349,
    350,
    351,
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483,
    484,
    485,
    486,
    487,
    488,
    489,
    490,
    491,
    492,
    493,
    494,
    495,
    496,
    497,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621,
    622,
    623,
    624,
    625,
    626,
    627,
    628,
    629,
    630,
    631,
    632,
    633,
    634,
    635,
    636,
    637,
    638,
    639,
    640,
    641,
    642,
    643,
    644,
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680,
    681,
    682,
    683,
    684,
    685,
    686,
    687,
    688,
    689,
    690,
    691,
    692,
    693,
    694,
    695,
    696,
    697,
    698,
    699,
    700,
    701,
    702,
    703,
    704,
    705,
    706,
    707,
    708,
    709,
    710,
    711,
    712,
    713,
    714,
    715,
    716,
    717,
    718,
    719,
    720,
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    732,
    733,
    734,
    735,
    736,
    737,
    738,
    739,
    740,
    741,
    742,
    743,
    744,
    745,
    746,
    747,
    748,
    749,
    750,
    751,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    763,
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    782,
    783,
    784,
    785,
    786,
    787,
    788,
    789,
    790,
    791,
    792,
    793,
    794,
    795,
    796,
    803,
    804,
    805,
    806,
    807,
    808,
    809,
    810,
    811,
    812,
    813,
    814,
    815,
    816,
    817,
    822,
    823,
    824,
    825,
    826,
    827,
    828,
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    845,
    846,
    847,
    848,
    849,
    850,
    851,
    852,
    853,
    854,
    855,
    866,
    867,
    868,
    869,
    870,
    871,
    872,
    873,
    874,
    875,
    876,
    887,
    888,
    889,
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    931,
    932,
    933,
    934,
    935,
    936,
    937,
    938,
    953,
    954,
    955,
    956,
    957,
    958,
    959,
    960,
    975,
    976,
    977,
    978,
    979,
    980,
    981,
    982,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1021,
    1022,
    1023,
    1024,
    1025,
    1044,
    1045,
    1046,
    1047,
    1048,
    1067,
    1068,
    1069,
    1070,
    1071,
    1090,
    1091,
    1092,
    1093,
    1094,
    1115,
    1116,
    1139,
    1140,
    1163,
    1164,
    1187,
    1188,
]


def beam_slices(map_file, fee_map, nside):
    """Returns pairs of [NS,EW] slices of maps, for each pointing"""

    t_name, r_name, _, _ = Path(map_file).stem.split("_")

    pointings = ["0", "2", "4"]

    maps = []

    # load data from map .npz file
    tile_map = np.load(map_file, allow_pickle=True)
    fee_m = np.load(fee_map, allow_pickle=True)

    for p in pointings:

        tile = tile_map[p]

        if "XX" in t_name:
            fee = fee_m[p][0]
        else:
            fee = fee_m[p][1]

        # rotate maps so slices can be taken
        fee_r = rotate_map(nside, angle=-np.pi / 4, healpix_array=fee)
        tile_r = rotate_map(nside, angle=-np.pi / 4, healpix_array=tile)

        #  fee_r[PB_0] = np.nan
        #  tile_r[PB_0] = np.nan

        # slice the tile and fee maps along NS, EW
        # zenith angle thresh of 70 to determine fit gain factor
        NS_f, EW_f = healpix_cardinal_slices(nside, fee_r, 70)
        NS_t, EW_t = map_slices(nside, tile_r, 70)

        gain_NS = chisq_fit_gain(data=NS_t[0], model=NS_f[0])
        gain_EW = chisq_fit_gain(data=EW_t[0], model=EW_f[0])

        # slice the tile and fee maps along NS, EW.
        # the above gain factor is applied to full beam slices
        NS_fee, EW_fee = healpix_cardinal_slices(nside, fee_r, 90)
        NS_tile, EW_tile = map_slices(nside, tile_r, 90)

        # Scale the data so that it best fits the beam slice
        NS_tile_med = NS_tile[0] - gain_NS[0]
        EW_tile_med = EW_tile[0] - gain_EW[0]

        # delta powers
        del_NS = NS_tile_med - NS_fee[0]
        del_EW = EW_tile_med - EW_fee[0]

        # 3rd order poly fits for residuals
        fit_NS = poly_fit(NS_tile[2], del_NS, NS_tile[0], 3)
        fit_EW = poly_fit(EW_tile[2], del_EW, EW_tile[0], 3)

        maps.append(
            [
                [NS_tile, NS_fee, NS_tile_med, del_NS, fit_NS],
                [EW_tile, EW_fee, EW_tile_med, del_EW, fit_EW],
            ]
        )

    return maps


def slice_residual():

    NS_r_XX = []
    NS_r_YY = []
    EW_r_XX = []
    EW_r_YY = []

    for tile in tiles:

        for pol in ["XX", "YY"]:

            f_tile = f"{map_dir}/{tile}{pol}_rf0{pol}_tile_maps.npz"

            try:
                map_slices = beam_slices(f_tile, fee_map, nside)

                #  pointings = ["0", "2", "4"]
                pointings = ["0"]

                for i, p in enumerate(pointings):
                    slices = map_slices[i]
                    NS_slices = slices[0]
                    fee_slice = NS_slices[1][0]
                    NS_med = NS_slices[0][0]
                    nulls = np.where(fee_slice < -80)
                    fee_slice[nulls] = np.nan
                    NS_med[nulls] = np.nan
                    NS_resi = np.array(fee_slice - NS_med)
                    if pol == "XX":
                        NS_r_XX.append(NS_resi)
                    else:
                        NS_r_YY.append(NS_resi)

                    EW_slices = slices[1]
                    fee_slice = EW_slices[1][0]
                    EW_med = EW_slices[0][0]
                    nulls = np.where(fee_slice < -80)
                    fee_slice[nulls] = np.nan
                    EW_med[nulls] = np.nan
                    EW_resi = np.array(fee_slice - EW_med)
                    if pol == "XX":
                        EW_r_XX.append(EW_resi)
                    else:
                        EW_r_YY.append(EW_resi)

            except Exception as e:
                print(e)

    NS_XX_res = np.nanmedian(np.array(NS_r_XX), axis=0)
    NS_YY_res = np.nanmedian(np.array(NS_r_YY), axis=0)
    EW_XX_res = np.nanmedian(np.array(EW_r_XX), axis=0)
    EW_YY_res = np.nanmedian(np.array(EW_r_YY), axis=0)

    NS_XX_mad = mad(np.array(NS_r_XX), axis=0)
    NS_YY_mad = mad(np.array(NS_r_YY), axis=0)
    EW_XX_mad = mad(np.array(EW_r_XX), axis=0)
    EW_YY_mad = mad(np.array(EW_r_YY), axis=0)

    # Only used to extract za arrays
    f_tile = f"{map_dir}/S06XX_rf0XX_tile_maps.npz"
    map_slices = beam_slices(f_tile, fee_map, nside)

    za = map_slices[0][0][0][2]

    NS_XX_fit = poly_fit(za, NS_XX_res, NS_XX_res, 2)
    NS_YY_fit = poly_fit(za, NS_YY_res, NS_YY_res, 2)
    EW_XX_fit = poly_fit(za, EW_XX_res, EW_XX_res, 2)
    EW_YY_fit = poly_fit(za, EW_YY_res, EW_YY_res, 2)

    # Plotting stuff
    plt.style.use("seaborn")

    nice_fonts = {
        "font.family": "sans-serif",
        "axes.labelsize": 8,
        "axes.titlesize": 9,
        "font.size": 8,
        "legend.fontsize": 8,
        "xtick.labelsize": 8,
        "ytick.labelsize": 8,
    }

    plt.rcParams.update(nice_fonts)

    colors = _spec(np.linspace(0.17, 0.9, 4))

    plt.figure(figsize=(6, 5))
    #  plt.errorbar(
    #  za,
    #  NS_XX_res,
    #  yerr=NS_XX_mad,
    #  fmt=".",
    #  ms=7,
    #  alpha=0.88,
    #  color=colors[0],
    #  elinewidth=1.4,
    #  capsize=1.4,
    #  capthick=1.6,
    #  )
    #  plt.errorbar(
    #  za,
    #  NS_YY_res,
    #  yerr=NS_YY_mad,
    #  fmt=".",
    #  ms=7,
    #  alpha=0.88,
    #  color=colors[1],
    #  elinewidth=1.4,
    #  capsize=1.4,
    #  capthick=1.6,
    #  )
    #  plt.errorbar(
    #  za,
    #  EW_XX_res,
    #  yerr=EW_XX_mad,
    #  fmt=".",
    #  ms=7,
    #  alpha=0.88,
    #  color=colors[2],
    #  elinewidth=1.4,
    #  capsize=1.4,
    #  capthick=1.6,
    #  )
    plt.errorbar(
        za,
        EW_YY_res,
        yerr=EW_YY_mad,
        fmt=".",
        ms=7,
        alpha=0.88,
        color=colors[3],
        elinewidth=1.4,
        capsize=1.4,
        capthick=1.6,
    )

    #  plt.scatter(
    #  za,
    #  NS_XX_res,
    #  s=16,
    #  alpha=0.88,
    #  edgecolor="black",
    #  linewidth=0.2,
    #  color=colors[0],
    #  )
    #  plt.scatter(
    #  za,
    #  NS_YY_res,
    #  s=16,
    #  alpha=0.88,
    #  edgecolor="black",
    #  linewidth=0.2,
    #  color=colors[1],
    #  )
    #  plt.scatter(
    #  za,
    #  EW_XX_res,
    #  s=16,
    #  alpha=0.88,
    #  edgecolor="black",
    #  linewidth=0.2,
    #  color=colors[2],
    #  )
    #  plt.scatter(
    #  za,
    #  EW_YY_res,
    #  s=16,
    #  alpha=0.88,
    #  edgecolor="black",
    #  linewidth=0.2,
    #  color=colors[3],
    #  )

    #  plt.plot(za, NS_XX_fit, label="NS_XX", linewidth=3, color=colors[0])
    #  plt.plot(za, NS_YY_fit, label="NS_YY", linewidth=3, color=colors[1])
    #  plt.plot(za, EW_XX_fit, label="EW_XX", linewidth=3, color=colors[2])
    plt.plot(za, EW_YY_fit, label="EW_YY", linewidth=3, color=colors[3])

    leg = plt.legend(loc="lower right", frameon=True, markerscale=4, handlelength=1)
    leg.get_frame().set_facecolor("white")
    for le in leg.legendHandles:
        le.set_alpha(1)

    plt.xlabel("Zenith Angle [degrees]")
    plt.ylabel("Residual Power [dB]")
    plt.tight_layout()
    plt.savefig("ref_rot/resi_err.pdf")


slice_residual()
